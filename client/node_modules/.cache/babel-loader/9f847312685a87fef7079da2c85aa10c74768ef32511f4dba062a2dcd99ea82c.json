{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eyala\\\\OneDrive\\\\Desktop\\\\iot-booking-elaco\\\\client\\\\src\\\\components\\\\reserve\\\\Reserve.jsx\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCircleXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./reserve.css\";\n// import useFetch from \"../../hooks/useFetch\";\n// import { useContext, useState } from \"react\";\n// import { SearchContext } from \"../../context/SearchContext\";\n// import { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reserve = ({\n  setOpen\n}) => {\n  // import { faCircleXmark } from \"@fortawesome/free-solid-svg-icons\";\n\n  // import \"./reserve.css\";\n  // import useFetch from \"../../hooks/useFetch\";\n  // import { useContext, useState } from \"react\";\n  // import { SearchContext } from \"../../context/SearchContext\";\n  // import axios from \"axios\";\n  // import { useNavigate } from \"react-router-dom\";\n\n  // const Reserve = ({ setOpen, hotelId }) => {\n  //   const [selectedRooms, setSelectedRooms] = useState([]);\n  //   const { data, loading, error } = useFetch(`/hotels/room/${hotelId}`);\n  //   const { dates } = useContext(SearchContext);\n\n  //   const getDatesInRange = (startDate, endDate) => {\n  //     const start = new Date(startDate);\n  //     const end = new Date(endDate);\n\n  //     const date = new Date(start.getTime());\n\n  //     const dates = [];\n\n  //     while (date <= end) {\n  //       dates.push(new Date(date).getTime());\n  //       date.setDate(date.getDate() + 1);\n  //     }\n\n  //     return dates;\n  //   };\n\n  //   const alldates = getDatesInRange(dates[0].startDate, dates[0].endDate);\n\n  //   const isAvailable = (roomNumber) => {\n  //     const isFound = roomNumber.unavailableDates.some((date) =>\n  //       alldates.includes(new Date(date).getTime())\n  //     );\n\n  //     return !isFound;\n  //   };\n\n  //   const handleSelect = (e) => {\n  //     const checked = e.target.checked;\n  //     const value = e.target.value;\n  //     setSelectedRooms(\n  //       checked\n  //         ? [...selectedRooms, value]\n  //         : selectedRooms.filter((item) => item !== value)\n  //     );\n  //   };\n\n  //   const navigate = useNavigate();\n\n  //   const handleClick = async () => {\n  //     try {\n  //       await Promise.all(\n  //         selectedRooms.map((roomId) => {\n  //           const res = axios.put(`/rooms/availability/${roomId}`, {\n  //             dates: alldates,\n  //           });\n  //           return res.data;\n  //         })\n  //       );\n  //       setOpen(false);\n  //       navigate(\"/\");\n  //     } catch (err) {}\n  //   };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"reserve\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c = Reserve;\nexport default Reserve;\nvar _c;\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"names":["FontAwesomeIcon","faCircleXmark","jsxDEV","_jsxDEV","Reserve","setOpen","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/eyala/OneDrive/Desktop/iot-booking-elaco/client/src/components/reserve/Reserve.jsx"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircleXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./reserve.css\";\r\n// import useFetch from \"../../hooks/useFetch\";\r\n// import { useContext, useState } from \"react\";\r\n// import { SearchContext } from \"../../context/SearchContext\";\r\n // import { useNavigate } from \"react-router-dom\";\r\n\r\nconst Reserve = ({ setOpen}) => {\r\n// import { faCircleXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// import \"./reserve.css\";\r\n// import useFetch from \"../../hooks/useFetch\";\r\n// import { useContext, useState } from \"react\";\r\n// import { SearchContext } from \"../../context/SearchContext\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const Reserve = ({ setOpen, hotelId }) => {\r\n//   const [selectedRooms, setSelectedRooms] = useState([]);\r\n//   const { data, loading, error } = useFetch(`/hotels/room/${hotelId}`);\r\n//   const { dates } = useContext(SearchContext);\r\n\r\n//   const getDatesInRange = (startDate, endDate) => {\r\n//     const start = new Date(startDate);\r\n//     const end = new Date(endDate);\r\n\r\n//     const date = new Date(start.getTime());\r\n\r\n//     const dates = [];\r\n\r\n//     while (date <= end) {\r\n//       dates.push(new Date(date).getTime());\r\n//       date.setDate(date.getDate() + 1);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const alldates = getDatesInRange(dates[0].startDate, dates[0].endDate);\r\n\r\n//   const isAvailable = (roomNumber) => {\r\n//     const isFound = roomNumber.unavailableDates.some((date) =>\r\n//       alldates.includes(new Date(date).getTime())\r\n//     );\r\n\r\n//     return !isFound;\r\n//   };\r\n\r\n//   const handleSelect = (e) => {\r\n//     const checked = e.target.checked;\r\n//     const value = e.target.value;\r\n//     setSelectedRooms(\r\n//       checked\r\n//         ? [...selectedRooms, value]\r\n//         : selectedRooms.filter((item) => item !== value)\r\n//     );\r\n//   };\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleClick = async () => {\r\n//     try {\r\n//       await Promise.all(\r\n//         selectedRooms.map((roomId) => {\r\n//           const res = axios.put(`/rooms/availability/${roomId}`, {\r\n//             dates: alldates,\r\n//           });\r\n//           return res.data;\r\n//         })\r\n//       );\r\n//       setOpen(false);\r\n//       navigate(\"/\");\r\n//     } catch (err) {}\r\n//   };\r\n  return (\r\n    <div>reserve</div>\r\n  );\r\n};\r\n\r\nexport default Reserve;"],"mappings":";AAAA,SAASA,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,QAAQ,mCAAmC;AAEjE,OAAO,eAAe;AACtB;AACA;AACA;AACC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAED,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAChC;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,oBACEF,OAAA;IAAAG,QAAA,EAAK;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEtB,CAAC;AAACC,EAAA,GAtEIP,OAAO;AAwEb,eAAeA,OAAO;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}